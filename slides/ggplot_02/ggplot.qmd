---
title: "ggplot"
subtitle: "Gramática de la visualización"
format: clean-revealjs
revealjs:
    fig-width: 10
    fig-height: 6
    fig-dpi: 300
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Roberto Cantillan C. 
    orcid: 0000-0003-0494-0692
    email: ricantillan@uc.cl
    affiliations: Universidad Católica del Maule
date: last-modified
---


```{r setup, include=TRUE}
library(ggplot2)
#install.packages("palmerpenguins")
library(palmerpenguins)
library(dplyr)
```

# Introducción a ggplot2

## ¿Qué es ggplot2?

- Paquete de visualización de datos para R
- Creado por Hadley Wickham
- Parte del ecosistema tidyverse
- Basado en la "Gramática de Gráficos"

::: {.notes}
ggplot2 es una poderosa herramienta de visualización que permite crear gráficos complejos de manera intuitiva.
:::

## ¿Por qué usar ggplot2?

- Sintaxis coherente y fácil de aprender
- Altamente personalizable
- Produce gráficos de calidad profesional
- Gran comunidad y documentación extensa

# Gramática de Gráficos

## Conceptos Fundamentales

La Gramática de Gráficos define un gráfico como:

1. Una asignación de variables de datos a **propiedades estéticas** de objetos geométricos
2. Esos objetos geométricos se trazan en un sistema de coordenadas específico
3. Las escalas controlan cómo se realiza la asignación de valores de datos a valores visuales

## Componentes de un Gráfico

- Datos
- Estética (aes)
- Geometrías (geom)
- Estadísticas (stat)
- Escalas
- Coordenadas
- Facetas
- Temas

::: {.notes}
Cada componente juega un papel crucial en la construcción de un gráfico.
:::

```{r}
# Definir el tema personalizado
theme_presentacion <- function(base_size = 16, base_family = "sans") {
  theme_minimal(base_size = base_size, base_family = base_family) %+replace%
    theme(
      # Título del gráfico
      plot.title = element_text(face = "bold", size = rel(1.2), hjust = 0.5, margin = margin(b = 10)),
      plot.subtitle = element_text(size = rel(1.05), hjust = 0.5, margin = margin(b = 10)),
      
      # Ejes
      axis.title = element_text(face = "bold", size = rel(1.1)),
      axis.text = element_text(size = rel(0.95)),
      axis.text.x = element_text(margin = margin(t = 5)),
      axis.text.y = element_text(margin = margin(r = 5)),
      axis.line = element_line(colour = "grey50"),
      
      # Leyenda
      legend.title = element_text(face = "bold", size = rel(1)),
      legend.text = element_text(size = rel(0.95)),
      legend.position = "bottom",
      legend.key.size = unit(1, "cm"),
      
      # Facetas
      strip.text = element_text(face = "bold", size = rel(1)),
      
      # Fondo y líneas de cuadrícula
      panel.grid.major = element_line(colour = "grey90"),
      panel.grid.minor = element_blank(),
      panel.background = element_rect(fill = "white", colour = NA),
      plot.background = element_rect(fill = "white", colour = NA),
      
      # Márgenes del gráfico
      plot.margin = margin(20, 20, 20, 20)
    )
}

# Configuración global de ggplot2
theme_set(theme_presentacion())
```

## Datos

- Los datos son la base de cualquier visualización
- Generalmente en forma de data frame
- Deben estar en formato "largo" (tidy)

```{r}
knitr::kable(head(penguins))
```

## Estética (aes)

- Define cómo se mapean las variables a las propiedades visuales
- Propiedades comunes: x, y, color, fill, size, shape, alpha

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point()
```

## Geometrías (geom)

- Representan los objetos que vemos en el gráfico
- Ejemplos: puntos, líneas, barras, cajas, etc.

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5

ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.5)
```

## Estadísticas (stat)

- Transformaciones estadísticas de los datos
- Ejemplos: conteos, medias, medianas, etc.

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5

ggplot(penguins, aes(x = species)) +
  geom_bar() +
  geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5)
```

## Escalas

- Controlan cómo se mapean los valores de datos a valores visuales
- Pueden ser continuas o discretas

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  scale_color_brewer(palette = "Set1") +
  scale_x_continuous(breaks = seq(170, 230, by = 10))
```

## Coordenadas

- Definen el espacio en el que se dibujan las geometrías
- Ejemplos: cartesianas, polares, mapa

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5

ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar() +
  coord_polar()
```

## Facetas

- Dividen los datos en subconjuntos y crean múltiples gráficos
- Útiles para visualizar relaciones en múltiples categorías

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species)) +
  facet_wrap(~island)
```

## Temas

- Controlan los aspectos no relacionados con los datos del gráfico
- Ejemplos: colores de fondo, etiquetas, leyendas, etc.
                                                                              
```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  theme_minimal() 
```

# Tipos Básicos de Gráficos

## Gráfico de Dispersión

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species), size = 3, alpha = 0.7) +
  labs(title = "Relación entre longitud de aleta y masa corporal",
       x = "Longitud de aleta (mm)",
       y = "Masa corporal (g)")
```

## Gráfico de Dispersión con Línea de Tendencia

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Relación entre longitud de aleta y masa corporal",
       subtitle = "Con líneas de tendencia por especie",
       x = "Longitud de aleta (mm)",
       y = "Masa corporal (g)")
```

## Gráfico de Líneas

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


# Crear datos de ejemplo
set.seed(123)
datos_tiempo <- data.frame(
  tiempo = rep(1:50, 3),
  valor = c(cumsum(rnorm(50)), cumsum(rnorm(50)), cumsum(rnorm(50))),
  grupo = rep(c("A", "B", "C"), each = 50)
)

ggplot(datos_tiempo, aes(x = tiempo, y = valor, color = grupo)) +
  geom_line() +
  labs(title = "Series de tiempo para tres grupos",
       x = "Tiempo",
       y = "Valor")
```

## Gráfico de Barras

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


penguins %>%
  count(species, sex) %>%
  ggplot(aes(x = species, y = n, fill = sex)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Conteo de pingüinos por especie y sexo",
       x = "Especie",
       y = "Conteo")
```

## Gráfico de Cajas (Boxplot)

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


ggplot(penguins, aes(x = species, y = body_mass_g, fill = species)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.5) +
  labs(title = "Distribución de masa corporal por especie",
       x = "Especie",
       y = "Masa corporal (g)")
```

## Gráfico de Violín

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


ggplot(penguins, aes(x = species, y = body_mass_g, fill = species)) +
  geom_violin() +
  geom_boxplot(width = 0.1, fill = "white") +
  labs(title = "Distribución de masa corporal por especie",
       x = "Especie",
       y = "Masa corporal (g)")
```

# Personalización Avanzada

## Temas Personalizados

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


tema_personalizado <- theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    axis.title = element_text(face = "italic"),
    legend.position = "bottom",
    panel.grid.major = element_line(color = "gray90"),
    panel.grid.minor = element_blank()
  )

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  labs(title = "Relación entre longitud de aleta y masa corporal") +
  tema_personalizado
```

## Escalas de Color Personalizadas

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point(size = 3, alpha = 0.7) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  labs(title = "Relación entre longitud de aleta y masa corporal",
       x = "Longitud de aleta (mm)",
       y = "Masa corporal (g)") +
  tema_personalizado
```

## Combinando Múltiples Geometrías

```{r echo=TRUE}
#| output-location: column-fragment
#| fig-width: 6
#| fig-height: 5


ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE) +
  geom_rug(alpha = 0.1) +
  facet_wrap(~island) +
  labs(title = "Relación entre longitud de aleta y masa corporal",
       subtitle = "Por isla y especie",
       x = "Longitud de aleta (mm)",
       y = "Masa corporal (g)") +
  tema_personalizado
```

# Conclusión y Recursos Adicionales

## Resumen

- ggplot2 proporciona una gramática flexible para crear gráficos
- Componentes clave: datos, estética, geometrías, estadísticas, escalas, coordenadas, facetas y temas
- Permite crear una amplia variedad de gráficos, desde simples hasta complejos
- La personalización es posible en todos los niveles

## Recursos Adicionales

- [Documentación oficial de ggplot2](https://ggplot2.tidyverse.org/)
- [R for Data Science: Capítulo de visualización](https://r4ds.had.co.nz/data-visualisation.html)
- [ggplot2 cheat sheet](https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf)
- [Cookbook for R - Graphs](http://www.cookbook-r.com/Graphs/)
- [R Graphics Cookbook](https://r-graphics.org/)


